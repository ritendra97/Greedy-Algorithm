import java.util.*;
class TUF {
static int countPlatforms(int n,int arr[],int dep[])
 {
    int ans=1; //final value
    for(int i=0;i<=n-1;i++)
    {
        int count=1; // count of overlapping interval of only this   iteration
        for(int j=i+1;j<=n-1;j++)
        {
            if((arr[i]>=arr[j] && arr[i]<=dep[j]) ||
           (arr[j]>=arr[i] && arr[j]<=dep[i]))
           {
               count++;
           }
        }
        ans=Math.max(ans,count); //updating the value
    }
    return ans;
 }
 
 
public static void main (String[] args) {
		
		int[] arr ={900,945,955,1100,1500,1800};
		int[] dep={920,1200,1130,1150,1900,2000};
		int n=arr.length;
		int totalCount=countPlatforms(n,arr,dep);
		System.out.println("Minimum number of Platforms required "+totalCount);
	}
}


import java.util.Arrays;

public class Main4 {

	public static int platFormNeeded(int arr[], int dep[]) {

		Arrays.sort(arr);
		Arrays.sort(dep);

		int n = arr.length;
		int i = 1;
		int j = 0;

		int plat_needed = 1;
		int result = 1;

		while (i < n && j < n) {
			if (arr[i] <= dep[j]) {
				plat_needed++;
				i++;
			} else if (dep[j] < arr[i]) {
				plat_needed--;
				j++;
			}

			if (plat_needed > result) {
				result = plat_needed;
			}
		}

		return result;
	}

	public static void main(String[] args) {
		int[] arr = { 900, 945, 955, 1100, 1500, 1800 };
		int[] dep = { 920, 1200, 1130, 1150, 1900, 2000 };
		
		System.out.println(platFormNeeded(arr, dep));
	}
}
